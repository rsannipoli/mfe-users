export const customerEvents = {
    LOGIN: "LOGIN",
    EDIT_CUSTOMER_SETTINGS: "EDIT_CUSTOMER_SETTINGS",
    EDIT_USER_SETTINGS: "EDIT_USER_SETTINGS",
}

export const customerDefaultState = {}

export const customerReducer = (state, action) => {
    switch (action.type) {
        case customerEvents.LOGIN:
            return {
                dateFormat:                       action.payload.dateFormat,
                coordinatesFormat:                action.payload.coordinatesFormat,
                fleetLimit:                       action.payload.fleetLimit,
                fleetTotalDocumentSize:           action.payload.fleetTotalDocumentSize,
                fleetTotalImageSize:              action.payload.fleetTotalImageSize,
                fleetCurrentDocumentSize:         action.payload.fleetCurrentDocumentSize,
                fleetCurrentImageSize:            action.payload.fleetCurrentImageSize,
                xtlPortMin:                       action.payload.xtlPortMin,
                xtlPortMax:                       action.payload.xtlPortMax,
                xtlStarboardMin:                  action.payload.xtlStarboardMin,
                xtlStarboardMax:                  action.payload.xtlStarboardMax,
                xtlPortDefault:                   action.payload.xtlPortDefault,
                xtlStarboardDefault:              action.payload.xtlStarboardDefault,
                sailFormat:                       action.payload.sailFormat,
                vesselPositionTimestampThreshold: action.payload.vesselPositionTimestampThreshold,
                mapUpdateFrequency:               action.payload.mapUpdateFrequency,
                defaultVoyageMode:                action.payload.defaultVoyageMode  &&  action.payload.defaultVoyageMode === "ON",
                planningMaxSpeed:                 action.payload.planningMaxSpeed,
                planningMinSpeed:                 action.payload.planningMinSpeed,
                planningDefaultSpeed:             action.payload.planningDefaultSpeed,
                smartlogPublishOnSave:            action.payload.smartlogPublishOnSave,
                geoServerUrl:                     action.payload.geoServerUrl,
                homePreference:                   action.payload.homePreference,
                logoId:                           action.payload.logoId,
                geoserverCacheUrl:                action.payload.geoserverCacheUrl,
                geoserverWorkspace:               action.payload.geoserverWorkspace,
                cndUrl:                           action.payload.cndUrl,
                planningSogThreshold:             action.payload.planningSogThreshold,
                planningHoursThreshold:           action.payload.planningHoursThreshold,
                planningVoyageWFEnabled:          action.payload.planningVoyageWFEnabled,
                defaultMapVesselBgColor:          action.payload.defaultMapVesselBgColor,
                defaultMapVesselTextColor:        action.payload.defaultMapVesselTextColor,
                smartlogDefaultMails:             action.payload.smartlogDefaultMails,
                enabledSources:                   action.payload.enabledSources,
                enabledTypes:                     action.payload.enabledTypes,
                consumptionLimit:                 action.payload.consumptionLimit,
                speedKnotsThreshold:              action.payload.speedKnotsThreshold,
                speedKnotsTolerance:              action.payload.speedKnotsTolerance,
                reportsCount:                     action.payload.reportsCount,
                toleranceDate:                   action.payload.toleranceDate,
                }
        case customerEvents.EDIT_CUSTOMER_SETTINGS:
            return {
                ...state,
                dateFormat:                       action.payload.dateFormat,
                coordinatesFormat:                action.payload.coordinatesFormat,
                fleetLimit:                       action.payload.fleetLimit,
                fleetTotalDocumentSize:           action.payload.fleetTotalDocumentSize,
                fleetTotalImageSize:              action.payload.fleetTotalImageSize,
                xtlPortMin:                       action.payload.xtlPortMin,
                xtlPortMax:                       action.payload.xtlPortMax,
                xtlStarboardMin:                  action.payload.xtlStarboardMin,
                xtlStarboardMax:                  action.payload.xtlStarboardMax,
                xtlPortDefault:                   action.payload.xtlPortDefault,
                xtlStarboardDefault:              action.payload.xtlStarboardDefault,
                sailFormat:                       action.payload.sailFormat,
                vesselPositionTimestampThreshold: action.payload.vesselPositionTimestampThreshold,
                mapUpdateFrequency:               action.payload.mapUpdateFrequency,
                defaultVoyageMode:                action.payload.defaultVoyageMode  && action.payload.defaultVoyageMode === "ON",
                planningMaxSpeed:                 action.payload.planningMaxSpeed,
                planningMinSpeed:                 action.payload.planningMinSpeed,
                planningDefaultSpeed:             action.payload.planningDefaultSpeed,
                smartlogPublishOnSave:            action.payload.smartlogPublishOnSave,
                geoServerUrl:                     action.payload.geoServerUrl,
                homePreference:                   action.payload.homePreference,
                logoId:                           action.payload.logoId,
                geoserverCacheUrl:                action.payload.geoserverCacheUrl,
                geoserverWorkspace:               action.payload.geoserverWorkspace,
                cndUrl:                           action.payload.cndUrl,
                planningSogThreshold:             action.payload.planningSogThreshold,
                planningHoursThreshold:           action.payload.planningHoursThreshold,
                planningVoyageWFEnabled:          action.payload.planningVoyageWFEnabled,
                defaultMapVesselBgColor:          action.payload.defaultMapVesselBgColor,
                defaultMapVesselTextColor:        action.payload.defaultMapVesselTextColor,
                smartlogDefaultMails:             action.payload.smartlogDefaultMails,
                enabledSources:                   action.payload.enabledSources,
                enabledTypes:                     action.payload.enabledTypes,
                consumptionLimit:                 action.payload.consumptionLimit,
                speedKnotsThreshold:              action.payload.speedKnotsThreshold,
                speedKnotsTolerance:              action.payload.speedKnotsTolerance,
                reportsCount:                     action.payload.reportsCount,
                toleranceDate:                   action.payload.toleranceDate,
            }
        case customerEvents.EDIT_USER_SETTINGS:
            return {
                ...state,
                dateFormat:                       action.payload.dateFormat,
                coordinatesFormat:                action.payload.coordinatesFormat,
                xtlPortDefault:                   action.payload.xtlPortDefault,
                xtlStarboardDefault:              action.payload.xtlStarboardDefault,
                sailFormat:                       action.payload.sailFormat,
                mapUpdateFrequency:               action.payload.mapUpdateFrequency,
                vesselMonitorUpdateFrequency:     action.payload.mapUpdateFrequency,
                homePreference:                   action.payload.homePreference,
            }
        default:
            return state
    }
}
